//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public abstract class CompositeElement : Component
{

    private List<Component> componentList;

    public CompositeElement(string pTitle, string pId, Dictionary<int, bool> pAccess) : base(pTitle, pId)
    {
        componentList = new List<Component>();
    }

	protected void add(string pId, Component pComponent)
	{
        Component toRemove = this.getChild(pId);
        if (!toRemove.isLeaf()) {
            this.componentList.Add(pComponent);
        }
        else
        {
            Console.WriteLine("Error agregregando elementos al elemento: " + pId);
        }
        
	}

	public virtual void remove(string pId)
	{
        Component toRemove = this.getChild(pId);
        this.componentList.Remove(toRemove);
	}

	public Component getChild(string pId)
	{
        Component result = null;
        int maxI = this.componentList.Count;
		for (int i = 0; i < maxI; i++)
        {
            if (this.componentList[i].getId().Equals(pId))
            {
                result = this.componentList[i];
            }
        }
        return result;
	}

    public Component getChild(int pIndex)
    {
        return this.componentList.ElementAt<Component>(pIndex);
    }

    public int getChildCount()
    {
        return this.componentList.Count;
    }

    public override bool isLeaf()
    {
        return false;
    }
}

