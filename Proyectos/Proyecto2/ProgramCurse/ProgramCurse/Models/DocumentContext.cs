//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Runtime.Serialization.Formatters.Binary;


public class DocumentContext : CompositeElement, Prototype<DocumentContext>
{

    private DocumentOriginator DocumentOriginator;

    private string validity;

    public DocumentContext(string pTitle, string pId, string pValidity) : base(pTitle, pId, new Dictionary<int, bool>
    {
        {1, false},
        {2, false},
        {3, true}
    })
    {
        this.validity = pValidity;
    }

    public void add(string pId, SectionContext pComponent)
	{
        base.add(pId, pComponent);
	}

    public DocumentContext clone()
    {
        using(Stream objectStream = new MemoryStream())
        {
            IFormatter formatter = new BinaryFormatter();
            formatter.Serialize(objectStream, this);
            objectStream.Seek(0, SeekOrigin.Begin);
            return (DocumentContext)formatter.Deserialize(objectStream);
        }
    }

    public override string ToString()
    {
        string result = this.getTitle() + ":{\n";
        int maxI = base.getChildCount();
        for (int i = 0; i < maxI; i++)
        {
            result += (i+1).ToString() + ". " + base.getChild(i).ToString() + "\n";
        }
        return result + "}";
    }

}

